type convertToUsd {
    price: Float
}

type timestampToUtc {
    dateUTC: String
}

type Query {
    convertToUsd(
        amount: Float!
        decimals: Float
        token: String! = "So11111111111111111111111111111111111111112"
    ): convertToUsd
        @rest(
            endpoint: "https://price.jup.ag/v1/price?id=$token"
            ecmascript: """
            function transformREST(s) {
                let out = JSON.parse(s).data;

                if (out.price) {
                    if (get("decimals")) {
                        out = { price: out.price * get("amount") / (10 ** get("decimals")) };
                    } else {
                        out = { price: out.price * get("amount") };
                    }
                }

                return JSON.stringify(out);
            }
            """
        )

    timestampToUtc(timestamp: Int!): timestampToUtc
        @rest(
            endpoint: "stepzen:empty"
            ecmascript: """
            function transformREST(s) {
                const date = new Date(get("timestamp") * 1000).toUTCString();

                return { dateUTC: date };
            }
            """
        )
}
